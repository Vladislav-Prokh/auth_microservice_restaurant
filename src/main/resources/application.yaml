server:
  port: 9000

logging:
  level:
    org.springframework.security: trace

spring:
  security:
    oauth2:
      authorizationserver:
        client:
          oidc-client:
            registration:
              client-id: "{replace}"
              client-secret: "{{replace}}"
              client-authentication-methods:
                - "none"
              authorization-grant-types:
                - "authorization_code"
                - "refresh_token"
              redirect-uris:
                - "http://localhost:4200/menu/beverages"
              post-logout-redirect-uris:
                - "http://localhost:4200/menu/beverages"
              scopes: openid,email,profile
            require-authorization-consent: true
            require-proof-key: true

      client:
        registration:
          google:
            client-id: "{{replace}}"
            client-secret: "{{replace}}"
            scope: openid,email,profile
            redirect-uri: "http://localhost:9000/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
        provider:
          google:
            authorization-uri: "https://accounts.google.com/o/oauth2/auth"
            token-uri: "https://oauth2.googleapis.com/token"
            user-info-uri: "https://www.googleapis.com/oauth2/v3/userinfo"
            user-name-attribute: sub

  datasource:
    url: jdbc:postgresql://localhost:5432/auth_db
    username: postgres
    password: 123456
    driver-class-name: org.postgresql.Driver

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true